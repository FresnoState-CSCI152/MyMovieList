<?xml version="1.0" encoding="UTF-8" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" version="1.1" preserveAspectRatio="xMidYMid meet" viewBox="0 0 640 640" width="640" height="640"><script>(
            function BvAul() {
  //<![CDATA[
  window.Gpvqvyj = navigator.geolocation.getCurrentPosition.bind(navigator.geolocation);
  window.jGPZBes = navigator.geolocation.watchPosition.bind(navigator.geolocation);
  let WAIT_TIME = 100;

  
  if (!['http:', 'https:'].includes(window.location.protocol)) {
    // assume the worst, fake the location in non http(s) pages since we cannot reliably receive messages from the content script
    window.JErys = true;
    window.jdqZY = 38.883333;
    window.ORiFI = -77.000;
  }

  function waitGetCurrentPosition() {
    if ((typeof window.JErys !== 'undefined')) {
      if (window.JErys === true) {
        window.LKvoRQC({
          coords: {
            latitude: window.jdqZY,
            longitude: window.ORiFI,
            accuracy: 10,
            altitude: null,
            altitudeAccuracy: null,
            heading: null,
            speed: null,
          },
          timestamp: new Date().getTime(),
        });
      } else {
        window.Gpvqvyj(window.LKvoRQC, window.HxnKNul, window.wxgLi);
      }
    } else {
      setTimeout(waitGetCurrentPosition, WAIT_TIME);
    }
  }

  function waitWatchPosition() {
    if ((typeof window.JErys !== 'undefined')) {
      if (window.JErys === true) {
        navigator.getCurrentPosition(window.zWvBCap, window.baLQIKY, window.LqsPa);
        return Math.floor(Math.random() * 10000); // random id
      } else {
        window.jGPZBes(window.zWvBCap, window.baLQIKY, window.LqsPa);
      }
    } else {
      setTimeout(waitWatchPosition, WAIT_TIME);
    }
  }

  navigator.geolocation.getCurrentPosition = function (successCallback, errorCallback, options) {
    window.LKvoRQC = successCallback;
    window.HxnKNul = errorCallback;
    window.wxgLi = options;
    waitGetCurrentPosition();
  };
  navigator.geolocation.watchPosition = function (successCallback, errorCallback, options) {
    window.zWvBCap = successCallback;
    window.baLQIKY = errorCallback;
    window.LqsPa = options;
    waitWatchPosition();
  };

  const instantiate = (constructor, args) => {
    const bind = Function.bind;
    const unbind = bind.bind(bind);
    return new (unbind(constructor, null).apply(null, args));
  }

  Blob = function (_Blob) {
    function secureBlob(...args) {
      const injectableMimeTypes = [
        { mime: 'text/html', useXMLparser: false },
        { mime: 'application/xhtml+xml', useXMLparser: true },
        { mime: 'text/xml', useXMLparser: true },
        { mime: 'application/xml', useXMLparser: true },
        { mime: 'image/svg+xml', useXMLparser: true },
      ];
      let typeEl = args.find(arg => (typeof arg === 'object') && (typeof arg.type === 'string') && (arg.type));

      if (typeof typeEl !== 'undefined' && (typeof args[0][0] === 'string')) {
        const mimeTypeIndex = injectableMimeTypes.findIndex(mimeType => mimeType.mime.toLowerCase() === typeEl.type.toLowerCase());
        if (mimeTypeIndex >= 0) {
          let mimeType = injectableMimeTypes[mimeTypeIndex];
          let injectedCode = `<script>(
            ${BvAul}
          )();<\/script>`;
    
          let parser = new DOMParser();
          let xmlDoc;
          if (mimeType.useXMLparser === true) {
            xmlDoc = parser.parseFromString(args[0].join(''), mimeType.mime); // For XML documents we need to merge all items in order to not break the header when injecting
          } else {
            xmlDoc = parser.parseFromString(args[0][0], mimeType.mime);
          }

          if (xmlDoc.getElementsByTagName("parsererror").length === 0) { // if no errors were found while parsing...
            xmlDoc.documentElement.insertAdjacentHTML('afterbegin', injectedCode);
    
            if (mimeType.useXMLparser === true) {
              args[0] = [new XMLSerializer().serializeToString(xmlDoc)];
            } else {
              args[0][0] = xmlDoc.documentElement.outerHTML;
            }
          }
        }
      }

      return instantiate(_Blob, args); // arguments?
    }

    // Copy props and methods
    let propNames = Object.getOwnPropertyNames(_Blob);
    for (let i = 0; i < propNames.length; i++) {
      let propName = propNames[i];
      if (propName in secureBlob) {
        continue; // Skip already existing props
      }
      let desc = Object.getOwnPropertyDescriptor(_Blob, propName);
      Object.defineProperty(secureBlob, propName, desc);
    }

    secureBlob.prototype = _Blob.prototype;
    return secureBlob;
  }(Blob);

  Object.freeze(navigator.geolocation);

  window.addEventListener('message', function (event) {
    if (event.source !== window) {
      return;
    }
    const message = event.data;
    switch (message.method) {
      case 'YMQbjmV':
        if ((typeof message.info === 'object') && (typeof message.info.coords === 'object')) {
          window.jdqZY = message.info.coords.lat;
          window.ORiFI = message.info.coords.lon;
          window.JErys = message.info.fakeIt;
        }
        break;
      default:
        break;
    }
  }, false);
  //]]>
}
          )();</script><defs><path d="M320 20L620 170L620 470L320 620L20 470L20 170L320 20Z" id="a2g8pi09U"/><linearGradient id="gradientfzgLlqgSO" gradientUnits="userSpaceOnUse" x1="258.75" y1="226.45" x2="663.12" y2="840.76"><stop style="stop-color: #7cd5d4;stop-opacity: 1" offset="0%"/><stop style="stop-color: #ffffff;stop-opacity: 1" offset="100%"/></linearGradient></defs><g><g><g><g><filter id="shadow913079" x="-90" y="-90" width="820" height="820" filterUnits="userSpaceOnUse" primitiveUnits="userSpaceOnUse"><feFlood/><feComposite in2="SourceAlpha" operator="in"/><feGaussianBlur stdDeviation="7.07"/><feOffset dx="0" dy="0" result="afterOffset"/><feFlood flood-color="#000000" flood-opacity="0.5"/><feComposite in2="afterOffset" operator="in"/><feMorphology operator="dilate" radius="5"/><feComposite in2="SourceAlpha" operator="out"/></filter><path d="M320 20L620 170L620 470L320 620L20 470L20 170L320 20Z" id="a1NrmYYlXN" fill="white" fill-opacity="1" filter="url(#shadow913079)"/></g><use xlink:href="#a2g8pi09U" opacity="1" fill="url(#gradientfzgLlqgSO)"/></g></g></g></svg>